// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////
// ENUMS
/////////////////////////////////

enum ServerRole {
  owner
  admin
  member
  moderator
}

enum InviteStatus {
  pending
  accepted
  rejected
  expired
}

enum NotificationType {
  message
  dm
  user_invite
  file_shared
  system
}

/////////////////////////////////
// MODELS
/////////////////////////////////

model User {
  userId       String   @id @default(uuid()) @db.Uuid
  firstName    String
  lastName     String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  createdServers   Server[]           @relation("ServerCreatedBy")
  memberships      ServerMembership[]
  lobbyMemberships LobbyMembership[]
  sentChats        Chat[]             @relation("ChatSender")
  readReceipts     ChatReadReceipt[]
  userInviteLinks ServerInvite[] @relation("inviteCreatedBy")
  redemptions InviteRedemption[]
  sentInvites     UserInvite[] @relation("UserInviteSender")
  receivedInvites UserInvite[] @relation("UserInviteReceiver")
  sentNotifications Notification[] @relation("NotificationSender")
  recievedNotifications Notification[] @relation("NotificationRecipient")
  tokenVersion  Int     @default(0)
}

model Server {
  serverId   String   @id @default(uuid()) @db.Uuid
  serverName String
  description String
  createdBy  String   @db.Uuid
  createdAt  DateTime @default(now())

  creator          User               @relation("ServerCreatedBy", fields: [createdBy], references: [userId], onDelete: Restrict)
  members          ServerMembership[]
  lobbies          Lobby[]
  chats            Chat[]
  lobbyMemberships LobbyMembership[]
  inviteLinks      ServerInvite[] 
  userInvites UserInvite[] @relation("inviteForServer")
  notifications Notification[]
  @@index([createdBy])
}

model ServerMembership {
  // Composite primary key guarantees uniqueness (one membership per user per server)
  serverId String     @db.Uuid
  userId   String     @db.Uuid
  role     ServerRole @default(member)
  joinedAt DateTime   @default(now())

  server Server @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([serverId, userId])
  @@index([userId])
}

model Lobby {
  lobbyId   String   @id @default(uuid()) @db.Uuid
  serverId  String   @db.Uuid
  lobbyName String
  isPrivate Boolean @default(false)
  createdAt DateTime @default(now())

  server  Server            @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  members LobbyMembership[]
  chats   Chat[]
  notifications Notification[]
  // Prevent duplicate lobby names within a server
  @@unique([serverId, lobbyName])
  @@index([serverId])
}

model LobbyMembership {
  // Per-member lobby access control:
  // - user must belong to the server (enforced with a composite FK via SQL migration below)
  // - serverId redundancy enables that composite FK and consistency check
  lobbyId  String   @db.Uuid
  userId   String   @db.Uuid
  serverId String   @db.Uuid
  role     String? // optional per-lobby role (e.g., "moderator")
  addedAt  DateTime @default(now())

  lobby  Lobby  @relation(fields: [lobbyId], references: [lobbyId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [serverId], onDelete: Cascade)

  @@id([lobbyId, userId])
  @@index([userId])
  @@index([serverId, lobbyId])
}

model Chat {
  chatId   String    @id @default(uuid()) @db.Uuid
  serverId String    @db.Uuid
  lobbyId  String    @db.Uuid
  sentBy   String    @db.Uuid
  message  String
  sentAt   DateTime  @default(now())
  editedAt DateTime?

  server          Server            @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  lobby           Lobby             @relation(fields: [lobbyId], references: [lobbyId], onDelete: Cascade)
  sender          User              @relation("ChatSender", fields: [sentBy], references: [userId], onDelete: SetNull)
  notifications Notification[]
  ChatReadReceipt ChatReadReceipt[]

  // Hot-path indexes for feeds & moderation views
  @@index([lobbyId, sentAt(sort: Desc)])
  @@index([serverId, sentAt(sort: Desc)])
}

model ChatReadReceipt {
  chatId String   @db.Uuid
  userId String   @db.Uuid
  seenAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([chatId, userId])
  @@index([userId])
}


model ServerInvite {
  inviteId   String   @id @default(uuid()) @db.Uuid
  serverId   String   @db.Uuid
  createdBy  String   @db.Uuid
  createdAt  DateTime @default(now())

  // Invite rules
  code       String   @unique               // e.g., short random code like "abc123"
  expiresAt  DateTime?                      // null means no expiry
  maxUses    Int?                            // null means unlimited
  uses       Int      @default(0)
  revoked    Boolean  @default(false)

  server  Server @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  creator User   @relation("inviteCreatedBy",fields: [createdBy], references: [userId], onDelete: Cascade)
  redempions InviteRedemption[]

  @@index([serverId])
  @@index([code])
}


model InviteRedemption {
  redemptionId String   @id @default(uuid()) @db.Uuid
  inviteId     String   @db.Uuid
  userId       String   @db.Uuid
  redeemedAt   DateTime @default(now())

  invite ServerInvite @relation(fields: [inviteId], references: [inviteId], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([inviteId])
  @@index([userId])
}

model UserInvite {
  inviteId   String   @id @default(uuid()) @db.Uuid
  serverId   String   @db.Uuid
  invitedBy  String   @db.Uuid   // who sent the invite
  invitedUserId String @db.Uuid   // who is being invited
  createdAt  DateTime @default(now())
  status     InviteStatus @default(pending)

  server Server @relation("inviteForServer",fields: [serverId], references: [serverId], onDelete: Cascade)
  sender User   @relation("UserInviteSender", fields: [invitedBy], references: [userId], onDelete: Cascade)
  invitedUser User @relation("UserInviteReceiver", fields: [invitedUserId], references: [userId], onDelete: Cascade)
  notifications Notification[]
  @@index([serverId])
  @@index([invitedUserId])
}

model Notification {
  notificationId String  @id @default(uuid()) @db.Uuid
  type           NotificationType
  senderId       String?   @db.Uuid         // Who triggered it (null if system-generated)
  recipientId    String    @db.Uuid         // Who receives it

  serverId       String?   @db.Uuid         // Optional (for server-related events)
  lobbyId        String?   @db.Uuid         // Optional (for lobby-specific messages)
  chatId         String?   @db.Uuid         // Optional (for message-related)
  fileId         String?   @db.Uuid         // Optional (for file-related)
  inviteId       String?   @db.Uuid         // Optional (for user invites)
  
  title          String?                     // Short notification title (e.g., "New message in #general")
  message        String?                     // Optional message preview / description
  link           String?                     // Optional link to redirect in frontend
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  // RELATIONS
  sender     User?          @relation("NotificationSender", fields: [senderId], references: [userId], onDelete: SetNull)
  recipient  User           @relation("NotificationRecipient", fields: [recipientId], references: [userId], onDelete: Cascade)
  server     Server?        @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  lobby      Lobby?         @relation(fields: [lobbyId], references: [lobbyId], onDelete: Cascade)
  chat       Chat?          @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  userInvite UserInvite?    @relation(fields: [inviteId], references: [inviteId], onDelete: Cascade)

  @@index([recipientId])
  @@index([serverId])
  @@index([lobbyId])
  @@index([chatId])
}